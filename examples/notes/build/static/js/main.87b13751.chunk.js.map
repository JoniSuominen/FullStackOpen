{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","notes","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleVisible","setState","showAll","state","handleNoteChange","event","console","log","target","value","newNote","addNote","preventDefault","noteObject","Date","toISOString","Math","random","noteService","toggleImportanceOf","find","n","changedNote","objectSpread","filter","catch","error","setTimeout","_this2","_this3","notesToShow","components_Notification","map","components_Note","key","onSubmit","onChange","type","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.87b13751.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    return (\r\n        <li className=\"note\">{note.content} <button onClick={toggleImportance}>{label} </button></li>\r\n    )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    const nonExisting = {\r\n        id: 1000,\r\n        content: 'Tätä muistiinpanoa ei ole palvelimella',\r\n        date: '2017-12-10T17:30:31.098Z',\r\n        important: true\r\n    }\r\n    return request.then(response => response.data.concat(nonExisting))\r\n\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default{getAll, create, update}","import React from 'react'\r\nimport Note from './components/Note'\r\nimport './index.css'\r\nimport Notification from './components/Notification'\r\nimport noteService from './services/notes'\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {  \r\n            notes: [],\r\n            newNote: 'uusi muistiinpano...',\r\n            showAll: false,\r\n            error: null\r\n        }\r\n        console.log('constructor')\r\n    }\r\n    componentDidMount() {\r\n        console.log('did mount')\r\n        noteService\r\n            .getAll()\r\n            .then(response => {\r\n                console.log('promise fullfilled')\r\n                this.setState({notes: response})\r\n            })\r\n    }\r\n    toggleVisible = () => {\r\n        this.setState({showAll: !this.state.showAll})\r\n    }\r\n    handleNoteChange = (event) => {\r\n        console.log(event.target.value)\r\n        this.setState({newNote: event.target.value})\r\n    }\r\n\r\n    addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: this.state.newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n\r\n        }\r\n        \r\n        noteService\r\n            .create(noteObject)\r\n            .then(newNote => {\r\n                this.setState({\r\n                    notes:  this.state.notes.concat(newNote),\r\n                    newNote: ''\r\n                })\r\n            })\r\n\r\n    }\r\n\r\n    toggleImportanceOf = (id) => {\r\n        return () => {\r\n            const note = this.state.notes.find(n => n.id === id)\r\n            const changedNote = {...note, important: !note.important}\r\n            console.log(`importance of  ${id} needs to be toggled`)\r\n\r\n            noteService\r\n                .update(id, changedNote)\r\n                .then(changedNote => {\r\n                    const notes = this.state.notes.filter(n => n.id !== id)\r\n                    this.setState({\r\n                        notes: notes.concat(changedNote)\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        error: `muistiinpano '${note.content}' on jo valitettavasti poistettu palvelimelta`,\r\n                        notes: this.state.notes.filter(n => n.id !== id)\r\n                    })\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            error: null\r\n                        })\r\n                    }, 5000)\r\n                })\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log('render')\r\n        const notesToShow = \r\n            this.state.showAll ?\r\n                this.state.notes :\r\n                this.state.notes.filter(note => note.important)\r\n\r\n        const label = this.state.showAll ? 'vain tärkeät' : 'kaikki'\r\n        return (\r\n            <div>\r\n                <h1>Muistiinpanot</h1>\r\n                <Notification message={this.state.error}/>\r\n                <div>\r\n                    <button onClick ={this.toggleVisible}>\r\n                    näytä {label}\r\n                    </button>\r\n                </div>\r\n                <ul>   \r\n                    {notesToShow.map(note =>\r\n                    <Note \r\n                    key={note.id} \r\n                    note={note}\r\n                    toggleImportance={this.toggleImportanceOf(note.id)}\r\n                    />)}\r\n                </ul>\r\n                <form onSubmit={this.addNote}>\r\n                    <input\r\n                    value={this.state.newNote}\r\n                    onChange={this.handleNoteChange}\r\n                    />\r\n                    <button type=\"submit\">tallenna</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\n\nReactDOM.render(\n    <App/>\n    , document.getElementById('root'));"],"sourceRoot":""}